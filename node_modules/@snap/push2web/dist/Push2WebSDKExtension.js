import { Subject } from "rxjs";
import { ConcatInjectable, Count, externalMetricsSubjectFactory, Injectable, createExtension, lensSourcesFactory, } from "@snap/camera-kit";
function assertUnreachable(_) {
    throw new Error("Reached unreachable code at runtime.");
}
export class Push2WebSDKExtension {
    extension;
    groupId = "PUSH_2_WEB_GROUP_ID";
    lastPushedEnvelope = undefined;
    metricsSubject = new Subject();
    constructor() {
        const push2WebLensSource = {
            isGroupOwner: (groupId) => groupId === this.groupId,
            loadLens: async () => {
                if (this.lastPushedEnvelope != undefined) {
                    return this.lastPushedEnvelope;
                }
                throw new Error("No pushed lens found.");
            },
            loadLensGroup: async () => {
                if (this.lastPushedEnvelope != undefined) {
                    return this.lastPushedEnvelope;
                }
                return new ArrayBuffer(0);
            },
        };
        this.extension = createExtension()
            .provides(ConcatInjectable(lensSourcesFactory.token, () => push2WebLensSource))
            .provides(Injectable(externalMetricsSubjectFactory.token, () => this.metricsSubject));
    }
    updateEnvelope(newEnvelope) {
        this.lastPushedEnvelope = newEnvelope;
    }
    reportEvent(events) {
        // Document which describes the operational metrics we send:
        // https://docs.google.com/document/d/1wGadstNanzvB_7XYf7fMlQhsHi90p73CHtpD39r_d3g/edit?pli=1#
        const { type } = events;
        switch (type) {
            case "error": {
                const dimensions = {};
                if (events.detail.name === "CommunicationError") {
                    dimensions["type"] = "subscription";
                    dimensions["cause"] = events.detail.grpcStatus;
                }
                else if (events.detail.name === "LensExcludedError") {
                    dimensions["type"] = "lens_excluded";
                    dimensions["cause"] = events.detail.cause.message;
                }
                this.metricsSubject.next(Count.count("push2web_error", 1, dimensions));
                break;
            }
            case "lensReceived": {
                this.metricsSubject.next(Count.count("push2web_received", 1));
                break;
            }
            case "subscriptionChanged": // do not report subscription changed events
                break;
            default: {
                assertUnreachable(type);
            }
        }
    }
}
