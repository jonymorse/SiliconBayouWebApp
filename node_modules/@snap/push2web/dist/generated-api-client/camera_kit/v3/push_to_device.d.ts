import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { grpc } from "@improbable-eng/grpc-web";
import { Observable } from "rxjs";
import { Lens } from "./lens";
export declare const protobufPackage = "com.snap.camerakit.v3";
export interface PushLensSubscriptionRequest {
    accountId: string;
    extensionRequestContext: Uint8Array;
    heartbeat: number;
}
export interface PushLensSubscriptionResponse {
    lens: Lens | undefined;
    excludedLens: PushLensSubscriptionResponse_ExcludedLens | undefined;
    heartbeat: number;
    lenses: {
        [key: string]: Uint8Array;
    };
}
export interface PushLensSubscriptionResponse_LensesEntry {
    key: string;
    value: Uint8Array;
}
export interface PushLensSubscriptionResponse_ExcludedLens {
    lensId: string;
    code: PushLensSubscriptionResponse_ExcludedLens_Code;
}
export declare enum PushLensSubscriptionResponse_ExcludedLens_Code {
    UNSET = "UNSET",
    UNKNOWN = "UNKNOWN",
    NOT_FOUND = "NOT_FOUND",
    INCOMPATIBLE_LENS_CORE_VERSION = "INCOMPATIBLE_LENS_CORE_VERSION",
    ARCHIVED_OR_INVISIBLE = "ARCHIVED_OR_INVISIBLE",
    CONTAINS_MUSIC = "CONTAINS_MUSIC",
    UNRECOGNIZED = "UNRECOGNIZED"
}
export declare function pushLensSubscriptionResponse_ExcludedLens_CodeFromJSON(object: any): PushLensSubscriptionResponse_ExcludedLens_Code;
export declare function pushLensSubscriptionResponse_ExcludedLens_CodeToJSON(object: PushLensSubscriptionResponse_ExcludedLens_Code): string;
export declare function pushLensSubscriptionResponse_ExcludedLens_CodeToNumber(object: PushLensSubscriptionResponse_ExcludedLens_Code): number;
export interface ListenLensPushRequest {
    extensionRequestContext: Uint8Array;
    heartbeat: number;
}
export interface ListenLensPushResponse {
    excludedLens: ListenLensPushResponse_ExcludedLens | undefined;
    heartbeat: number;
    lenses: {
        [key: string]: Uint8Array;
    };
}
export interface ListenLensPushResponse_LensesEntry {
    key: string;
    value: Uint8Array;
}
export interface ListenLensPushResponse_ExcludedLens {
    lensId: string;
    code: ListenLensPushResponse_ExcludedLens_Code;
}
export declare enum ListenLensPushResponse_ExcludedLens_Code {
    UNSET = "UNSET",
    UNKNOWN = "UNKNOWN",
    NOT_FOUND = "NOT_FOUND",
    INCOMPATIBLE_LENS_CORE_VERSION = "INCOMPATIBLE_LENS_CORE_VERSION",
    ARCHIVED_OR_INVISIBLE = "ARCHIVED_OR_INVISIBLE",
    CONTAINS_MUSIC = "CONTAINS_MUSIC",
    UNRECOGNIZED = "UNRECOGNIZED"
}
export declare function listenLensPushResponse_ExcludedLens_CodeFromJSON(object: any): ListenLensPushResponse_ExcludedLens_Code;
export declare function listenLensPushResponse_ExcludedLens_CodeToJSON(object: ListenLensPushResponse_ExcludedLens_Code): string;
export declare function listenLensPushResponse_ExcludedLens_CodeToNumber(object: ListenLensPushResponse_ExcludedLens_Code): number;
export declare const PushLensSubscriptionRequest: MessageFns<PushLensSubscriptionRequest>;
export declare const PushLensSubscriptionResponse: MessageFns<PushLensSubscriptionResponse>;
export declare const PushLensSubscriptionResponse_LensesEntry: MessageFns<PushLensSubscriptionResponse_LensesEntry>;
export declare const PushLensSubscriptionResponse_ExcludedLens: MessageFns<PushLensSubscriptionResponse_ExcludedLens>;
export declare const ListenLensPushRequest: MessageFns<ListenLensPushRequest>;
export declare const ListenLensPushResponse: MessageFns<ListenLensPushResponse>;
export declare const ListenLensPushResponse_LensesEntry: MessageFns<ListenLensPushResponse_LensesEntry>;
export declare const ListenLensPushResponse_ExcludedLens: MessageFns<ListenLensPushResponse_ExcludedLens>;
export interface PushToDevice {
    PushLensSubscription(request: Observable<DeepPartial<PushLensSubscriptionRequest>>, metadata?: grpc.Metadata): Observable<PushLensSubscriptionResponse>;
    ListenLensPush(request: DeepPartial<ListenLensPushRequest>, metadata?: grpc.Metadata): Observable<ListenLensPushResponse>;
}
export declare class PushToDeviceClientImpl implements PushToDevice {
    private readonly rpc;
    constructor(rpc: Rpc);
    PushLensSubscription(request: Observable<DeepPartial<PushLensSubscriptionRequest>>, metadata?: grpc.Metadata): Observable<PushLensSubscriptionResponse>;
    ListenLensPush(request: DeepPartial<ListenLensPushRequest>, metadata?: grpc.Metadata): Observable<ListenLensPushResponse>;
}
export declare const PushToDeviceDesc: {
    serviceName: string;
};
export declare const PushToDeviceListenLensPushDesc: UnaryMethodDefinitionish;
interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
    requestStream: any;
    responseStream: any;
}
type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;
interface Rpc {
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, request: any, metadata: grpc.Metadata | undefined): Promise<any>;
    invoke<T extends UnaryMethodDefinitionish>(methodDesc: T, request: any, metadata: grpc.Metadata | undefined): Observable<any>;
}
export declare class GrpcWebImpl {
    private host;
    private options;
    constructor(host: string, options: {
        transport?: grpc.TransportFactory;
        streamingTransport?: grpc.TransportFactory;
        debug?: boolean;
        metadata?: grpc.Metadata;
        upStreamRetryCodes?: number[];
    });
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, _request: any, metadata: grpc.Metadata | undefined): Promise<any>;
    invoke<T extends UnaryMethodDefinitionish>(methodDesc: T, _request: any, metadata: grpc.Metadata | undefined): Observable<any>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export declare class GrpcWebError extends globalThis.Error {
    code: grpc.Code;
    metadata: grpc.Metadata;
    constructor(message: string, code: grpc.Code, metadata: grpc.Metadata);
}
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
