import { BinaryReader } from "@bufbuild/protobuf/wire";
import { Any } from "../../google/protobuf/any";
export const protobufPackage = "com.snap.camerakit.v3";
export var Lens_CameraFacing;
(function (Lens_CameraFacing) {
    Lens_CameraFacing["CAMERA_FACING_UNSET"] = "CAMERA_FACING_UNSET";
    Lens_CameraFacing["CAMERA_FACING_FRONT"] = "CAMERA_FACING_FRONT";
    Lens_CameraFacing["CAMERA_FACING_BACK"] = "CAMERA_FACING_BACK";
    Lens_CameraFacing["UNRECOGNIZED"] = "UNRECOGNIZED";
})(Lens_CameraFacing || (Lens_CameraFacing = {}));
export function lens_CameraFacingFromJSON(object) {
    switch (object) {
        case 0:
        case "CAMERA_FACING_UNSET":
            return Lens_CameraFacing.CAMERA_FACING_UNSET;
        case 1:
        case "CAMERA_FACING_FRONT":
            return Lens_CameraFacing.CAMERA_FACING_FRONT;
        case 2:
        case "CAMERA_FACING_BACK":
            return Lens_CameraFacing.CAMERA_FACING_BACK;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Lens_CameraFacing.UNRECOGNIZED;
    }
}
export function lens_CameraFacingToJSON(object) {
    switch (object) {
        case Lens_CameraFacing.CAMERA_FACING_UNSET:
            return "CAMERA_FACING_UNSET";
        case Lens_CameraFacing.CAMERA_FACING_FRONT:
            return "CAMERA_FACING_FRONT";
        case Lens_CameraFacing.CAMERA_FACING_BACK:
            return "CAMERA_FACING_BACK";
        case Lens_CameraFacing.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
export function lens_CameraFacingToNumber(object) {
    switch (object) {
        case Lens_CameraFacing.CAMERA_FACING_UNSET:
            return 0;
        case Lens_CameraFacing.CAMERA_FACING_FRONT:
            return 1;
        case Lens_CameraFacing.CAMERA_FACING_BACK:
            return 2;
        case Lens_CameraFacing.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var LensAssetManifestItem_Type;
(function (LensAssetManifestItem_Type) {
    LensAssetManifestItem_Type["DEVICE_DEPENDENT_ASSET_UNSET"] = "DEVICE_DEPENDENT_ASSET_UNSET";
    LensAssetManifestItem_Type["ASSET"] = "ASSET";
    LensAssetManifestItem_Type["UNRECOGNIZED"] = "UNRECOGNIZED";
})(LensAssetManifestItem_Type || (LensAssetManifestItem_Type = {}));
export function lensAssetManifestItem_TypeFromJSON(object) {
    switch (object) {
        case 0:
        case "DEVICE_DEPENDENT_ASSET_UNSET":
            return LensAssetManifestItem_Type.DEVICE_DEPENDENT_ASSET_UNSET;
        case 1:
        case "ASSET":
            return LensAssetManifestItem_Type.ASSET;
        case -1:
        case "UNRECOGNIZED":
        default:
            return LensAssetManifestItem_Type.UNRECOGNIZED;
    }
}
export function lensAssetManifestItem_TypeToJSON(object) {
    switch (object) {
        case LensAssetManifestItem_Type.DEVICE_DEPENDENT_ASSET_UNSET:
            return "DEVICE_DEPENDENT_ASSET_UNSET";
        case LensAssetManifestItem_Type.ASSET:
            return "ASSET";
        case LensAssetManifestItem_Type.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
export function lensAssetManifestItem_TypeToNumber(object) {
    switch (object) {
        case LensAssetManifestItem_Type.DEVICE_DEPENDENT_ASSET_UNSET:
            return 0;
        case LensAssetManifestItem_Type.ASSET:
            return 1;
        case LensAssetManifestItem_Type.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var LensAssetManifestItem_RequestTiming;
(function (LensAssetManifestItem_RequestTiming) {
    LensAssetManifestItem_RequestTiming["PRELOAD_UNSET"] = "PRELOAD_UNSET";
    LensAssetManifestItem_RequestTiming["ON_DEMAND"] = "ON_DEMAND";
    LensAssetManifestItem_RequestTiming["REQUIRED"] = "REQUIRED";
    LensAssetManifestItem_RequestTiming["UNRECOGNIZED"] = "UNRECOGNIZED";
})(LensAssetManifestItem_RequestTiming || (LensAssetManifestItem_RequestTiming = {}));
export function lensAssetManifestItem_RequestTimingFromJSON(object) {
    switch (object) {
        case 0:
        case "PRELOAD_UNSET":
            return LensAssetManifestItem_RequestTiming.PRELOAD_UNSET;
        case 1:
        case "ON_DEMAND":
            return LensAssetManifestItem_RequestTiming.ON_DEMAND;
        case 2:
        case "REQUIRED":
            return LensAssetManifestItem_RequestTiming.REQUIRED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return LensAssetManifestItem_RequestTiming.UNRECOGNIZED;
    }
}
export function lensAssetManifestItem_RequestTimingToJSON(object) {
    switch (object) {
        case LensAssetManifestItem_RequestTiming.PRELOAD_UNSET:
            return "PRELOAD_UNSET";
        case LensAssetManifestItem_RequestTiming.ON_DEMAND:
            return "ON_DEMAND";
        case LensAssetManifestItem_RequestTiming.REQUIRED:
            return "REQUIRED";
        case LensAssetManifestItem_RequestTiming.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
export function lensAssetManifestItem_RequestTimingToNumber(object) {
    switch (object) {
        case LensAssetManifestItem_RequestTiming.PRELOAD_UNSET:
            return 0;
        case LensAssetManifestItem_RequestTiming.ON_DEMAND:
            return 1;
        case LensAssetManifestItem_RequestTiming.REQUIRED:
            return 2;
        case LensAssetManifestItem_RequestTiming.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseLens() {
    return {
        id: "",
        name: "",
        vendorData: {},
        content: undefined,
        isThirdParty: false,
        cameraFacingPreference: Lens_CameraFacing.CAMERA_FACING_UNSET,
        featureMetadata: [],
        lensCreator: undefined,
        scannable: undefined,
    };
}
export const Lens = {
    encode() {
        throw new Error("Not implemented.");
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLens();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    const entry3 = Lens_VendorDataEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.vendorData[entry3.key] = entry3.value;
                    }
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.content = Content.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.isThirdParty = reader.bool();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.cameraFacingPreference = lens_CameraFacingFromJSON(reader.int32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.featureMetadata.push(Any.decode(reader, reader.uint32()));
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.lensCreator = LensCreator.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.scannable = Scannable.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            vendorData: isObject(object.vendorData)
                ? Object.entries(object.vendorData).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            content: isSet(object.content) ? Content.fromJSON(object.content) : undefined,
            isThirdParty: isSet(object.isThirdParty) ? globalThis.Boolean(object.isThirdParty) : false,
            cameraFacingPreference: isSet(object.cameraFacingPreference)
                ? lens_CameraFacingFromJSON(object.cameraFacingPreference)
                : Lens_CameraFacing.CAMERA_FACING_UNSET,
            featureMetadata: globalThis.Array.isArray(object?.featureMetadata)
                ? object.featureMetadata.map((e) => Any.fromJSON(e))
                : [],
            lensCreator: isSet(object.lensCreator) ? LensCreator.fromJSON(object.lensCreator) : undefined,
            scannable: isSet(object.scannable) ? Scannable.fromJSON(object.scannable) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.vendorData) {
            const entries = Object.entries(message.vendorData);
            if (entries.length > 0) {
                obj.vendorData = {};
                entries.forEach(([k, v]) => {
                    obj.vendorData[k] = v;
                });
            }
        }
        if (message.content !== undefined) {
            obj.content = Content.toJSON(message.content);
        }
        if (message.isThirdParty !== false) {
            obj.isThirdParty = message.isThirdParty;
        }
        if (message.cameraFacingPreference !== Lens_CameraFacing.CAMERA_FACING_UNSET) {
            obj.cameraFacingPreference = lens_CameraFacingToJSON(message.cameraFacingPreference);
        }
        if (message.featureMetadata?.length) {
            obj.featureMetadata = message.featureMetadata.map((e) => Any.toJSON(e));
        }
        if (message.lensCreator !== undefined) {
            obj.lensCreator = LensCreator.toJSON(message.lensCreator);
        }
        if (message.scannable !== undefined) {
            obj.scannable = Scannable.toJSON(message.scannable);
        }
        return obj;
    },
    create(base) {
        return Lens.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLens();
        message.id = object.id ?? "";
        message.name = object.name ?? "";
        message.vendorData = Object.entries(object.vendorData ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        message.content = (object.content !== undefined && object.content !== null)
            ? Content.fromPartial(object.content)
            : undefined;
        message.isThirdParty = object.isThirdParty ?? false;
        message.cameraFacingPreference = object.cameraFacingPreference ?? Lens_CameraFacing.CAMERA_FACING_UNSET;
        message.featureMetadata = object.featureMetadata?.map((e) => Any.fromPartial(e)) || [];
        message.lensCreator = (object.lensCreator !== undefined && object.lensCreator !== null)
            ? LensCreator.fromPartial(object.lensCreator)
            : undefined;
        message.scannable = (object.scannable !== undefined && object.scannable !== null)
            ? Scannable.fromPartial(object.scannable)
            : undefined;
        return message;
    },
};
function createBaseLens_VendorDataEntry() {
    return { key: "", value: "" };
}
export const Lens_VendorDataEntry = {
    encode() {
        throw new Error("Not implemented.");
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLens_VendorDataEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return Lens_VendorDataEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLens_VendorDataEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
function createBaseContent() {
    return {
        lnsUrl: "",
        lnsSha256: "",
        iconUrl: "",
        preview: undefined,
        assetManifest: [],
        defaultHintId: "",
        hintTranslations: {},
        lnsUrlBolt: "",
        iconUrlBolt: "",
    };
}
export const Content = {
    encode() {
        throw new Error("Not implemented.");
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.lnsUrl = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.lnsSha256 = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.iconUrl = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.preview = Preview.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.assetManifest.push(LensAssetManifestItem.decode(reader, reader.uint32()));
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.defaultHintId = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    const entry7 = Content_HintTranslationsEntry.decode(reader, reader.uint32());
                    if (entry7.value !== undefined) {
                        message.hintTranslations[entry7.key] = entry7.value;
                    }
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.lnsUrlBolt = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.iconUrlBolt = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            lnsUrl: isSet(object.lnsUrl) ? globalThis.String(object.lnsUrl) : "",
            lnsSha256: isSet(object.lnsSha256) ? globalThis.String(object.lnsSha256) : "",
            iconUrl: isSet(object.iconUrl) ? globalThis.String(object.iconUrl) : "",
            preview: isSet(object.preview) ? Preview.fromJSON(object.preview) : undefined,
            assetManifest: globalThis.Array.isArray(object?.assetManifest)
                ? object.assetManifest.map((e) => LensAssetManifestItem.fromJSON(e))
                : [],
            defaultHintId: isSet(object.defaultHintId) ? globalThis.String(object.defaultHintId) : "",
            hintTranslations: isObject(object.hintTranslations)
                ? Object.entries(object.hintTranslations).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            lnsUrlBolt: isSet(object.lnsUrlBolt) ? globalThis.String(object.lnsUrlBolt) : "",
            iconUrlBolt: isSet(object.iconUrlBolt) ? globalThis.String(object.iconUrlBolt) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.lnsUrl !== "") {
            obj.lnsUrl = message.lnsUrl;
        }
        if (message.lnsSha256 !== "") {
            obj.lnsSha256 = message.lnsSha256;
        }
        if (message.iconUrl !== "") {
            obj.iconUrl = message.iconUrl;
        }
        if (message.preview !== undefined) {
            obj.preview = Preview.toJSON(message.preview);
        }
        if (message.assetManifest?.length) {
            obj.assetManifest = message.assetManifest.map((e) => LensAssetManifestItem.toJSON(e));
        }
        if (message.defaultHintId !== "") {
            obj.defaultHintId = message.defaultHintId;
        }
        if (message.hintTranslations) {
            const entries = Object.entries(message.hintTranslations);
            if (entries.length > 0) {
                obj.hintTranslations = {};
                entries.forEach(([k, v]) => {
                    obj.hintTranslations[k] = v;
                });
            }
        }
        if (message.lnsUrlBolt !== "") {
            obj.lnsUrlBolt = message.lnsUrlBolt;
        }
        if (message.iconUrlBolt !== "") {
            obj.iconUrlBolt = message.iconUrlBolt;
        }
        return obj;
    },
    create(base) {
        return Content.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseContent();
        message.lnsUrl = object.lnsUrl ?? "";
        message.lnsSha256 = object.lnsSha256 ?? "";
        message.iconUrl = object.iconUrl ?? "";
        message.preview = (object.preview !== undefined && object.preview !== null)
            ? Preview.fromPartial(object.preview)
            : undefined;
        message.assetManifest = object.assetManifest?.map((e) => LensAssetManifestItem.fromPartial(e)) || [];
        message.defaultHintId = object.defaultHintId ?? "";
        message.hintTranslations = Object.entries(object.hintTranslations ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        message.lnsUrlBolt = object.lnsUrlBolt ?? "";
        message.iconUrlBolt = object.iconUrlBolt ?? "";
        return message;
    },
};
function createBaseContent_HintTranslationsEntry() {
    return { key: "", value: "" };
}
export const Content_HintTranslationsEntry = {
    encode() {
        throw new Error("Not implemented.");
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseContent_HintTranslationsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return Content_HintTranslationsEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseContent_HintTranslationsEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
function createBaseLensAssetManifestItem() {
    return {
        type: LensAssetManifestItem_Type.DEVICE_DEPENDENT_ASSET_UNSET,
        id: "",
        requestTiming: LensAssetManifestItem_RequestTiming.PRELOAD_UNSET,
        assetUrl: "",
        assetChecksum: "",
    };
}
export const LensAssetManifestItem = {
    encode() {
        throw new Error("Not implemented.");
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLensAssetManifestItem();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.type = lensAssetManifestItem_TypeFromJSON(reader.int32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.requestTiming = lensAssetManifestItem_RequestTimingFromJSON(reader.int32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.assetUrl = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.assetChecksum = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            type: isSet(object.type)
                ? lensAssetManifestItem_TypeFromJSON(object.type)
                : LensAssetManifestItem_Type.DEVICE_DEPENDENT_ASSET_UNSET,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            requestTiming: isSet(object.requestTiming)
                ? lensAssetManifestItem_RequestTimingFromJSON(object.requestTiming)
                : LensAssetManifestItem_RequestTiming.PRELOAD_UNSET,
            assetUrl: isSet(object.assetUrl) ? globalThis.String(object.assetUrl) : "",
            assetChecksum: isSet(object.assetChecksum) ? globalThis.String(object.assetChecksum) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.type !== LensAssetManifestItem_Type.DEVICE_DEPENDENT_ASSET_UNSET) {
            obj.type = lensAssetManifestItem_TypeToJSON(message.type);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.requestTiming !== LensAssetManifestItem_RequestTiming.PRELOAD_UNSET) {
            obj.requestTiming = lensAssetManifestItem_RequestTimingToJSON(message.requestTiming);
        }
        if (message.assetUrl !== "") {
            obj.assetUrl = message.assetUrl;
        }
        if (message.assetChecksum !== "") {
            obj.assetChecksum = message.assetChecksum;
        }
        return obj;
    },
    create(base) {
        return LensAssetManifestItem.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLensAssetManifestItem();
        message.type = object.type ?? LensAssetManifestItem_Type.DEVICE_DEPENDENT_ASSET_UNSET;
        message.id = object.id ?? "";
        message.requestTiming = object.requestTiming ?? LensAssetManifestItem_RequestTiming.PRELOAD_UNSET;
        message.assetUrl = object.assetUrl ?? "";
        message.assetChecksum = object.assetChecksum ?? "";
        return message;
    },
};
function createBasePreview() {
    return { imageUrl: "", imageSequenceSize: 0, imageSequenceWebpUrlPattern: "" };
}
export const Preview = {
    encode() {
        throw new Error("Not implemented.");
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePreview();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.imageUrl = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.imageSequenceSize = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.imageSequenceWebpUrlPattern = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            imageUrl: isSet(object.imageUrl) ? globalThis.String(object.imageUrl) : "",
            imageSequenceSize: isSet(object.imageSequenceSize) ? globalThis.Number(object.imageSequenceSize) : 0,
            imageSequenceWebpUrlPattern: isSet(object.imageSequenceWebpUrlPattern)
                ? globalThis.String(object.imageSequenceWebpUrlPattern)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.imageUrl !== "") {
            obj.imageUrl = message.imageUrl;
        }
        if (message.imageSequenceSize !== 0) {
            obj.imageSequenceSize = Math.round(message.imageSequenceSize);
        }
        if (message.imageSequenceWebpUrlPattern !== "") {
            obj.imageSequenceWebpUrlPattern = message.imageSequenceWebpUrlPattern;
        }
        return obj;
    },
    create(base) {
        return Preview.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePreview();
        message.imageUrl = object.imageUrl ?? "";
        message.imageSequenceSize = object.imageSequenceSize ?? 0;
        message.imageSequenceWebpUrlPattern = object.imageSequenceWebpUrlPattern ?? "";
        return message;
    },
};
function createBaseLensCreator() {
    return { displayName: "" };
}
export const LensCreator = {
    encode() {
        throw new Error("Not implemented.");
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLensCreator();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.displayName = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.displayName !== "") {
            obj.displayName = message.displayName;
        }
        return obj;
    },
    create(base) {
        return LensCreator.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLensCreator();
        message.displayName = object.displayName ?? "";
        return message;
    },
};
function createBaseScannable() {
    return { snapcodeImageUrl: "", snapcodeDeeplink: "" };
}
export const Scannable = {
    encode() {
        throw new Error("Not implemented.");
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseScannable();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.snapcodeImageUrl = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.snapcodeDeeplink = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            snapcodeImageUrl: isSet(object.snapcodeImageUrl) ? globalThis.String(object.snapcodeImageUrl) : "",
            snapcodeDeeplink: isSet(object.snapcodeDeeplink) ? globalThis.String(object.snapcodeDeeplink) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.snapcodeImageUrl !== "") {
            obj.snapcodeImageUrl = message.snapcodeImageUrl;
        }
        if (message.snapcodeDeeplink !== "") {
            obj.snapcodeDeeplink = message.snapcodeDeeplink;
        }
        return obj;
    },
    create(base) {
        return Scannable.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseScannable();
        message.snapcodeImageUrl = object.snapcodeImageUrl ?? "";
        message.snapcodeDeeplink = object.snapcodeDeeplink ?? "";
        return message;
    },
};
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
