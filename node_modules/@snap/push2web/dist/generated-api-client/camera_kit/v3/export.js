import { BinaryReader } from "@bufbuild/protobuf/wire";
import { Lens } from "./lens";
export const protobufPackage = "com.snap.camerakit.v3";
export var ExportLensesByIdRequest_Context_Extension_Name;
(function (ExportLensesByIdRequest_Context_Extension_Name) {
    ExportLensesByIdRequest_Context_Extension_Name["UNSET"] = "UNSET";
    ExportLensesByIdRequest_Context_Extension_Name["SHOP_KIT"] = "SHOP_KIT";
    ExportLensesByIdRequest_Context_Extension_Name["LENS_WEB_BUILDER"] = "LENS_WEB_BUILDER";
    ExportLensesByIdRequest_Context_Extension_Name["UNRECOGNIZED"] = "UNRECOGNIZED";
})(ExportLensesByIdRequest_Context_Extension_Name || (ExportLensesByIdRequest_Context_Extension_Name = {}));
export function exportLensesByIdRequest_Context_Extension_NameFromJSON(object) {
    switch (object) {
        case 0:
        case "UNSET":
            return ExportLensesByIdRequest_Context_Extension_Name.UNSET;
        case 1:
        case "SHOP_KIT":
            return ExportLensesByIdRequest_Context_Extension_Name.SHOP_KIT;
        case 2:
        case "LENS_WEB_BUILDER":
            return ExportLensesByIdRequest_Context_Extension_Name.LENS_WEB_BUILDER;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ExportLensesByIdRequest_Context_Extension_Name.UNRECOGNIZED;
    }
}
export function exportLensesByIdRequest_Context_Extension_NameToJSON(object) {
    switch (object) {
        case ExportLensesByIdRequest_Context_Extension_Name.UNSET:
            return "UNSET";
        case ExportLensesByIdRequest_Context_Extension_Name.SHOP_KIT:
            return "SHOP_KIT";
        case ExportLensesByIdRequest_Context_Extension_Name.LENS_WEB_BUILDER:
            return "LENS_WEB_BUILDER";
        case ExportLensesByIdRequest_Context_Extension_Name.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
export function exportLensesByIdRequest_Context_Extension_NameToNumber(object) {
    switch (object) {
        case ExportLensesByIdRequest_Context_Extension_Name.UNSET:
            return 0;
        case ExportLensesByIdRequest_Context_Extension_Name.SHOP_KIT:
            return 1;
        case ExportLensesByIdRequest_Context_Extension_Name.LENS_WEB_BUILDER:
            return 2;
        case ExportLensesByIdRequest_Context_Extension_Name.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var ExportLensesByIdResponse_ExcludedLens_Code;
(function (ExportLensesByIdResponse_ExcludedLens_Code) {
    ExportLensesByIdResponse_ExcludedLens_Code["UNSET"] = "UNSET";
    ExportLensesByIdResponse_ExcludedLens_Code["UNKNOWN"] = "UNKNOWN";
    ExportLensesByIdResponse_ExcludedLens_Code["NOT_FOUND"] = "NOT_FOUND";
    ExportLensesByIdResponse_ExcludedLens_Code["INCOMPATIBLE_LENS_CORE_VERSION"] = "INCOMPATIBLE_LENS_CORE_VERSION";
    ExportLensesByIdResponse_ExcludedLens_Code["ARCHIVED_OR_INVISIBLE"] = "ARCHIVED_OR_INVISIBLE";
    ExportLensesByIdResponse_ExcludedLens_Code["CONTAINS_MUSIC"] = "CONTAINS_MUSIC";
    ExportLensesByIdResponse_ExcludedLens_Code["UNRECOGNIZED"] = "UNRECOGNIZED";
})(ExportLensesByIdResponse_ExcludedLens_Code || (ExportLensesByIdResponse_ExcludedLens_Code = {}));
export function exportLensesByIdResponse_ExcludedLens_CodeFromJSON(object) {
    switch (object) {
        case 0:
        case "UNSET":
            return ExportLensesByIdResponse_ExcludedLens_Code.UNSET;
        case 1:
        case "UNKNOWN":
            return ExportLensesByIdResponse_ExcludedLens_Code.UNKNOWN;
        case 2:
        case "NOT_FOUND":
            return ExportLensesByIdResponse_ExcludedLens_Code.NOT_FOUND;
        case 3:
        case "INCOMPATIBLE_LENS_CORE_VERSION":
            return ExportLensesByIdResponse_ExcludedLens_Code.INCOMPATIBLE_LENS_CORE_VERSION;
        case 4:
        case "ARCHIVED_OR_INVISIBLE":
            return ExportLensesByIdResponse_ExcludedLens_Code.ARCHIVED_OR_INVISIBLE;
        case 5:
        case "CONTAINS_MUSIC":
            return ExportLensesByIdResponse_ExcludedLens_Code.CONTAINS_MUSIC;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ExportLensesByIdResponse_ExcludedLens_Code.UNRECOGNIZED;
    }
}
export function exportLensesByIdResponse_ExcludedLens_CodeToJSON(object) {
    switch (object) {
        case ExportLensesByIdResponse_ExcludedLens_Code.UNSET:
            return "UNSET";
        case ExportLensesByIdResponse_ExcludedLens_Code.UNKNOWN:
            return "UNKNOWN";
        case ExportLensesByIdResponse_ExcludedLens_Code.NOT_FOUND:
            return "NOT_FOUND";
        case ExportLensesByIdResponse_ExcludedLens_Code.INCOMPATIBLE_LENS_CORE_VERSION:
            return "INCOMPATIBLE_LENS_CORE_VERSION";
        case ExportLensesByIdResponse_ExcludedLens_Code.ARCHIVED_OR_INVISIBLE:
            return "ARCHIVED_OR_INVISIBLE";
        case ExportLensesByIdResponse_ExcludedLens_Code.CONTAINS_MUSIC:
            return "CONTAINS_MUSIC";
        case ExportLensesByIdResponse_ExcludedLens_Code.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
export function exportLensesByIdResponse_ExcludedLens_CodeToNumber(object) {
    switch (object) {
        case ExportLensesByIdResponse_ExcludedLens_Code.UNSET:
            return 0;
        case ExportLensesByIdResponse_ExcludedLens_Code.UNKNOWN:
            return 1;
        case ExportLensesByIdResponse_ExcludedLens_Code.NOT_FOUND:
            return 2;
        case ExportLensesByIdResponse_ExcludedLens_Code.INCOMPATIBLE_LENS_CORE_VERSION:
            return 3;
        case ExportLensesByIdResponse_ExcludedLens_Code.ARCHIVED_OR_INVISIBLE:
            return 4;
        case ExportLensesByIdResponse_ExcludedLens_Code.CONTAINS_MUSIC:
            return 5;
        case ExportLensesByIdResponse_ExcludedLens_Code.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseExportLensesByIdRequest() {
    return { unlockableIds: [], context: undefined };
}
export const ExportLensesByIdRequest = {
    encode() {
        throw new Error("Not implemented.");
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExportLensesByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 8) {
                        message.unlockableIds.push(reader.int64().toString());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.unlockableIds.push(reader.int64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.context = ExportLensesByIdRequest_Context.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            unlockableIds: globalThis.Array.isArray(object?.unlockableIds)
                ? object.unlockableIds.map((e) => globalThis.String(e))
                : [],
            context: isSet(object.context) ? ExportLensesByIdRequest_Context.fromJSON(object.context) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.unlockableIds?.length) {
            obj.unlockableIds = message.unlockableIds;
        }
        if (message.context !== undefined) {
            obj.context = ExportLensesByIdRequest_Context.toJSON(message.context);
        }
        return obj;
    },
    create(base) {
        return ExportLensesByIdRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseExportLensesByIdRequest();
        message.unlockableIds = object.unlockableIds?.map((e) => e) || [];
        message.context = (object.context !== undefined && object.context !== null)
            ? ExportLensesByIdRequest_Context.fromPartial(object.context)
            : undefined;
        return message;
    },
};
function createBaseExportLensesByIdRequest_Context() {
    return {
        userAgent: "",
        locale: "",
        extention: undefined,
        extension: undefined,
        extensionRequestContext: new Uint8Array(0),
    };
}
export const ExportLensesByIdRequest_Context = {
    encode() {
        throw new Error("Not implemented.");
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExportLensesByIdRequest_Context();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userAgent = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.locale = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.extention = ExportLensesByIdRequest_Context_Extension.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.extension = ExportLensesByIdRequest_Context_Extension.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.extensionRequestContext = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userAgent: isSet(object.userAgent) ? globalThis.String(object.userAgent) : "",
            locale: isSet(object.locale) ? globalThis.String(object.locale) : "",
            extention: isSet(object.extention)
                ? ExportLensesByIdRequest_Context_Extension.fromJSON(object.extention)
                : undefined,
            extension: isSet(object.extension)
                ? ExportLensesByIdRequest_Context_Extension.fromJSON(object.extension)
                : undefined,
            extensionRequestContext: isSet(object.extensionRequestContext)
                ? bytesFromBase64(object.extensionRequestContext)
                : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userAgent !== "") {
            obj.userAgent = message.userAgent;
        }
        if (message.locale !== "") {
            obj.locale = message.locale;
        }
        if (message.extention !== undefined) {
            obj.extention = ExportLensesByIdRequest_Context_Extension.toJSON(message.extention);
        }
        if (message.extension !== undefined) {
            obj.extension = ExportLensesByIdRequest_Context_Extension.toJSON(message.extension);
        }
        if (message.extensionRequestContext.length !== 0) {
            obj.extensionRequestContext = base64FromBytes(message.extensionRequestContext);
        }
        return obj;
    },
    create(base) {
        return ExportLensesByIdRequest_Context.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseExportLensesByIdRequest_Context();
        message.userAgent = object.userAgent ?? "";
        message.locale = object.locale ?? "";
        message.extention = (object.extention !== undefined && object.extention !== null)
            ? ExportLensesByIdRequest_Context_Extension.fromPartial(object.extention)
            : undefined;
        message.extension = (object.extension !== undefined && object.extension !== null)
            ? ExportLensesByIdRequest_Context_Extension.fromPartial(object.extension)
            : undefined;
        message.extensionRequestContext = object.extensionRequestContext ?? new Uint8Array(0);
        return message;
    },
};
function createBaseExportLensesByIdRequest_Context_Extension() {
    return { name: ExportLensesByIdRequest_Context_Extension_Name.UNSET, version: "" };
}
export const ExportLensesByIdRequest_Context_Extension = {
    encode() {
        throw new Error("Not implemented.");
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExportLensesByIdRequest_Context_Extension();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.name = exportLensesByIdRequest_Context_Extension_NameFromJSON(reader.int32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name)
                ? exportLensesByIdRequest_Context_Extension_NameFromJSON(object.name)
                : ExportLensesByIdRequest_Context_Extension_Name.UNSET,
            version: isSet(object.version) ? globalThis.String(object.version) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== ExportLensesByIdRequest_Context_Extension_Name.UNSET) {
            obj.name = exportLensesByIdRequest_Context_Extension_NameToJSON(message.name);
        }
        if (message.version !== "") {
            obj.version = message.version;
        }
        return obj;
    },
    create(base) {
        return ExportLensesByIdRequest_Context_Extension.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseExportLensesByIdRequest_Context_Extension();
        message.name = object.name ?? ExportLensesByIdRequest_Context_Extension_Name.UNSET;
        message.version = object.version ?? "";
        return message;
    },
};
function createBaseExportLensesByIdResponse() {
    return { lenses: {}, excludedLenses: [] };
}
export const ExportLensesByIdResponse = {
    encode() {
        throw new Error("Not implemented.");
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExportLensesByIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = ExportLensesByIdResponse_LensesEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.lenses[entry1.key] = entry1.value;
                    }
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.excludedLenses.push(ExportLensesByIdResponse_ExcludedLens.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            lenses: isObject(object.lenses)
                ? Object.entries(object.lenses).reduce((acc, [key, value]) => {
                    acc[key] = bytesFromBase64(value);
                    return acc;
                }, {})
                : {},
            excludedLenses: globalThis.Array.isArray(object?.excludedLenses)
                ? object.excludedLenses.map((e) => ExportLensesByIdResponse_ExcludedLens.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.lenses) {
            const entries = Object.entries(message.lenses);
            if (entries.length > 0) {
                obj.lenses = {};
                entries.forEach(([k, v]) => {
                    obj.lenses[k] = base64FromBytes(v);
                });
            }
        }
        if (message.excludedLenses?.length) {
            obj.excludedLenses = message.excludedLenses.map((e) => ExportLensesByIdResponse_ExcludedLens.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ExportLensesByIdResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseExportLensesByIdResponse();
        message.lenses = Object.entries(object.lenses ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = value;
            }
            return acc;
        }, {});
        message.excludedLenses = object.excludedLenses?.map((e) => ExportLensesByIdResponse_ExcludedLens.fromPartial(e)) ||
            [];
        return message;
    },
};
function createBaseExportLensesByIdResponse_LensesEntry() {
    return { key: "0", value: new Uint8Array(0) };
}
export const ExportLensesByIdResponse_LensesEntry = {
    encode() {
        throw new Error("Not implemented.");
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExportLensesByIdResponse_LensesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.key = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "0",
            value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "0") {
            obj.key = message.key;
        }
        if (message.value.length !== 0) {
            obj.value = base64FromBytes(message.value);
        }
        return obj;
    },
    create(base) {
        return ExportLensesByIdResponse_LensesEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseExportLensesByIdResponse_LensesEntry();
        message.key = object.key ?? "0";
        message.value = object.value ?? new Uint8Array(0);
        return message;
    },
};
function createBaseExportLensesByIdResponse_ExcludedLens() {
    return { lensId: "0", code: ExportLensesByIdResponse_ExcludedLens_Code.UNSET, reason: "" };
}
export const ExportLensesByIdResponse_ExcludedLens = {
    encode() {
        throw new Error("Not implemented.");
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExportLensesByIdResponse_ExcludedLens();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.lensId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.code = exportLensesByIdResponse_ExcludedLens_CodeFromJSON(reader.int32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.reason = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            lensId: isSet(object.lensId) ? globalThis.String(object.lensId) : "0",
            code: isSet(object.code)
                ? exportLensesByIdResponse_ExcludedLens_CodeFromJSON(object.code)
                : ExportLensesByIdResponse_ExcludedLens_Code.UNSET,
            reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.lensId !== "0") {
            obj.lensId = message.lensId;
        }
        if (message.code !== ExportLensesByIdResponse_ExcludedLens_Code.UNSET) {
            obj.code = exportLensesByIdResponse_ExcludedLens_CodeToJSON(message.code);
        }
        if (message.reason !== "") {
            obj.reason = message.reason;
        }
        return obj;
    },
    create(base) {
        return ExportLensesByIdResponse_ExcludedLens.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseExportLensesByIdResponse_ExcludedLens();
        message.lensId = object.lensId ?? "0";
        message.code = object.code ?? ExportLensesByIdResponse_ExcludedLens_Code.UNSET;
        message.reason = object.reason ?? "";
        return message;
    },
};
function createBaseExtensionRequestContext() {
    return { userAgent: "", locale: "" };
}
export const ExtensionRequestContext = {
    encode() {
        throw new Error("Not implemented.");
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExtensionRequestContext();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userAgent = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.locale = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userAgent: isSet(object.userAgent) ? globalThis.String(object.userAgent) : "",
            locale: isSet(object.locale) ? globalThis.String(object.locale) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userAgent !== "") {
            obj.userAgent = message.userAgent;
        }
        if (message.locale !== "") {
            obj.locale = message.locale;
        }
        return obj;
    },
    create(base) {
        return ExtensionRequestContext.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseExtensionRequestContext();
        message.userAgent = object.userAgent ?? "";
        message.locale = object.locale ?? "";
        return message;
    },
};
function createBaseEnvelope() {
    return { lenses: [] };
}
export const Envelope = {
    encode() {
        throw new Error("Not implemented.");
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEnvelope();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.lenses.push(Lens.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { lenses: globalThis.Array.isArray(object?.lenses) ? object.lenses.map((e) => Lens.fromJSON(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.lenses?.length) {
            obj.lenses = message.lenses.map((e) => Lens.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return Envelope.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEnvelope();
        message.lenses = object.lenses?.map((e) => Lens.fromPartial(e)) || [];
        return message;
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
