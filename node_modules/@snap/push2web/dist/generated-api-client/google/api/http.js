// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.4
//   protoc               v5.28.2
// source: google/api/http.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export const protobufPackage = "google.api";
function createBaseHttp() {
    return { rules: [], fullyDecodeReservedExpansion: false };
}
export const Http = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.rules) {
            HttpRule.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.fullyDecodeReservedExpansion !== false) {
            writer.uint32(16).bool(message.fullyDecodeReservedExpansion);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHttp();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.rules.push(HttpRule.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.fullyDecodeReservedExpansion = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            rules: globalThis.Array.isArray(object?.rules) ? object.rules.map((e) => HttpRule.fromJSON(e)) : [],
            fullyDecodeReservedExpansion: isSet(object.fullyDecodeReservedExpansion)
                ? globalThis.Boolean(object.fullyDecodeReservedExpansion)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.rules?.length) {
            obj.rules = message.rules.map((e) => HttpRule.toJSON(e));
        }
        if (message.fullyDecodeReservedExpansion !== false) {
            obj.fullyDecodeReservedExpansion = message.fullyDecodeReservedExpansion;
        }
        return obj;
    },
    create(base) {
        return Http.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseHttp();
        message.rules = object.rules?.map((e) => HttpRule.fromPartial(e)) || [];
        message.fullyDecodeReservedExpansion = object.fullyDecodeReservedExpansion ?? false;
        return message;
    },
};
function createBaseHttpRule() {
    return { selector: "", pattern: undefined, body: "", additionalBindings: [] };
}
export const HttpRule = {
    encode(message, writer = new BinaryWriter()) {
        if (message.selector !== "") {
            writer.uint32(10).string(message.selector);
        }
        switch (message.pattern?.$case) {
            case "get":
                writer.uint32(18).string(message.pattern.get);
                break;
            case "put":
                writer.uint32(26).string(message.pattern.put);
                break;
            case "post":
                writer.uint32(34).string(message.pattern.post);
                break;
            case "delete":
                writer.uint32(42).string(message.pattern.delete);
                break;
            case "patch":
                writer.uint32(50).string(message.pattern.patch);
                break;
            case "custom":
                CustomHttpPattern.encode(message.pattern.custom, writer.uint32(66).fork()).join();
                break;
        }
        if (message.body !== "") {
            writer.uint32(58).string(message.body);
        }
        for (const v of message.additionalBindings) {
            HttpRule.encode(v, writer.uint32(90).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHttpRule();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.selector = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.pattern = { $case: "get", get: reader.string() };
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.pattern = { $case: "put", put: reader.string() };
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.pattern = { $case: "post", post: reader.string() };
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.pattern = { $case: "delete", delete: reader.string() };
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.pattern = { $case: "patch", patch: reader.string() };
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.pattern = { $case: "custom", custom: CustomHttpPattern.decode(reader, reader.uint32()) };
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.body = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.additionalBindings.push(HttpRule.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            selector: isSet(object.selector) ? globalThis.String(object.selector) : "",
            pattern: isSet(object.get)
                ? { $case: "get", get: globalThis.String(object.get) }
                : isSet(object.put)
                    ? { $case: "put", put: globalThis.String(object.put) }
                    : isSet(object.post)
                        ? { $case: "post", post: globalThis.String(object.post) }
                        : isSet(object.delete)
                            ? { $case: "delete", delete: globalThis.String(object.delete) }
                            : isSet(object.patch)
                                ? { $case: "patch", patch: globalThis.String(object.patch) }
                                : isSet(object.custom)
                                    ? { $case: "custom", custom: CustomHttpPattern.fromJSON(object.custom) }
                                    : undefined,
            body: isSet(object.body) ? globalThis.String(object.body) : "",
            additionalBindings: globalThis.Array.isArray(object?.additionalBindings)
                ? object.additionalBindings.map((e) => HttpRule.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.selector !== "") {
            obj.selector = message.selector;
        }
        if (message.pattern?.$case === "get") {
            obj.get = message.pattern.get;
        }
        if (message.pattern?.$case === "put") {
            obj.put = message.pattern.put;
        }
        if (message.pattern?.$case === "post") {
            obj.post = message.pattern.post;
        }
        if (message.pattern?.$case === "delete") {
            obj.delete = message.pattern.delete;
        }
        if (message.pattern?.$case === "patch") {
            obj.patch = message.pattern.patch;
        }
        if (message.pattern?.$case === "custom") {
            obj.custom = CustomHttpPattern.toJSON(message.pattern.custom);
        }
        if (message.body !== "") {
            obj.body = message.body;
        }
        if (message.additionalBindings?.length) {
            obj.additionalBindings = message.additionalBindings.map((e) => HttpRule.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return HttpRule.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseHttpRule();
        message.selector = object.selector ?? "";
        if (object.pattern?.$case === "get" && object.pattern?.get !== undefined && object.pattern?.get !== null) {
            message.pattern = { $case: "get", get: object.pattern.get };
        }
        if (object.pattern?.$case === "put" && object.pattern?.put !== undefined && object.pattern?.put !== null) {
            message.pattern = { $case: "put", put: object.pattern.put };
        }
        if (object.pattern?.$case === "post" && object.pattern?.post !== undefined && object.pattern?.post !== null) {
            message.pattern = { $case: "post", post: object.pattern.post };
        }
        if (object.pattern?.$case === "delete" && object.pattern?.delete !== undefined && object.pattern?.delete !== null) {
            message.pattern = { $case: "delete", delete: object.pattern.delete };
        }
        if (object.pattern?.$case === "patch" && object.pattern?.patch !== undefined && object.pattern?.patch !== null) {
            message.pattern = { $case: "patch", patch: object.pattern.patch };
        }
        if (object.pattern?.$case === "custom" && object.pattern?.custom !== undefined && object.pattern?.custom !== null) {
            message.pattern = { $case: "custom", custom: CustomHttpPattern.fromPartial(object.pattern.custom) };
        }
        message.body = object.body ?? "";
        message.additionalBindings = object.additionalBindings?.map((e) => HttpRule.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCustomHttpPattern() {
    return { kind: "", path: "" };
}
export const CustomHttpPattern = {
    encode(message, writer = new BinaryWriter()) {
        if (message.kind !== "") {
            writer.uint32(10).string(message.kind);
        }
        if (message.path !== "") {
            writer.uint32(18).string(message.path);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCustomHttpPattern();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.kind = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.path = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            kind: isSet(object.kind) ? globalThis.String(object.kind) : "",
            path: isSet(object.path) ? globalThis.String(object.path) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.kind !== "") {
            obj.kind = message.kind;
        }
        if (message.path !== "") {
            obj.path = message.path;
        }
        return obj;
    },
    create(base) {
        return CustomHttpPattern.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCustomHttpPattern();
        message.kind = object.kind ?? "";
        message.path = object.path ?? "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
